# This is a basic workflow to help you get started with Actions

name: Build Test Deploy Terraform

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_test_terraform:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      ## Setup Terraform 
      - name: HashiCorp - Setup Terraform
      # You may pin to the exact commit or the version.
      # uses: hashicorp/setup-terraform@d22444889af304a44b997011fbabb81ff705a7b4
        uses: hashicorp/setup-terraform@v1.2.1
      
      - name: Azure CLI Action
        env:
          BLOB_NAME: ${{ secrets.TFVAR_BLOB_NAME }}
          CONTAINER_NAME: ${{ secrets.TFVAR_CONTAINER_NAME }}
          TFVAR_STG_NAME: ${{ secrets.TFVAR_STG_ACCNT_NAME }}
          TFVAR_CONN_STRING: ${{ secrets.TFVAR_STG_CONNECTION_STRING }}
        uses: Azure/cli@1.0.4
        with:
        # Specify the script here
          inlineScript: |
            az storage blob download \
            -c $CONTAINER_NAME \
            -f $BLOB_NAME \
            --account-name $TFVAR_STG_NAME \
            --name $BLOB_NAME \
            --connection-string $TFVAR_CONN_STRING

      
      #Is this providing the values without quotes?
      - name: Create Backend Config
        env:
          BACKEND_RG_NAME: ${{ secrets.BACKEND_RG_NAME }}
          BACKEND_STG_CONTAINER: ${{ secrets.BACKEND_STG_CONTAINER }}
          BACKEND_STG_ACCNT: ${{ secrets.BACKEND_STG_ACCNT }}
          BACKEND_SUB_ID: ${{ secrets.BACKEND_SUB_ID }}
        run: |
          cat >backend.tf <<EOL
          terraform {
            backend "azurerm" {
              resource_group_name  = "$BACKEND_RG_NAME"
              storage_account_name = "$BACKEND_STG_ACCNT"
              container_name       = "$BACKEND_STG_CONTAINER"
              subscription_id      = "$BACKEND_SUB_ID"
              key = "dev.tfstate"
            }
          }
          EOL

          cat backend.tf 
          
        
         

      # Runs a set of commands using the runners shell
      - name: Run Terraform Validation
        env:
          TFVAR_FILE: ${{ secrets.TFVAR_BLOB_NAME}}
          ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
          ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
        run: |
          export ARM_CLIENT_SECRET="$ARM_CLIENT_SECRET"
          export ARM_CLIENT_ID="$ARM_CLIENT_ID"
          export ARM_SUBSCRIPTION_ID="$ARM_SUBSCRIPTION_ID"
          export ARM_TENANT_ID="$ARM_TENANT_ID"
          terraform init
          terraform validate
          terraform plan -out dev.tfplan -var-file $TFVAR_FILE
      
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v2.2.4
        with:
        # Artifact name
          name: terra-fact # optional, default is artifact
        # A file, directory or wildcard pattern that describes what to upload
          path: |
            backend.tf
            main.tf
            dev.tfplan
            modules
            variables.tf
  
  deploy_terraform:
    needs: [build_test_terraform]
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps: 

      - name: HashiCorp - Setup Terraform
      # You may pin to the exact commit or the version.
      # uses: hashicorp/setup-terraform@d22444889af304a44b997011fbabb81ff705a7b4
        uses: hashicorp/setup-terraform@v1.2.1
    
      - name: Download a Build Artifact
        uses: actions/download-artifact@v2.0.10
        with:
          # Artifact name
          name: terra-fact # optional
          # Destination path
          path: .
            
      - name: Run Terraform Apply
        env:
          ARM_CLIENT_SECRET: ${{ secrets.AZ_CLIENT_SECRET }}
          ARM_CLIENT_ID: ${{ secrets.AZ_CLIENT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZ_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZ_TENANT_ID }}
        run: |
          export ARM_CLIENT_SECRET="$ARM_CLIENT_SECRET"
          export ARM_CLIENT_ID="$ARM_CLIENT_ID"
          export ARM_SUBSCRIPTION_ID="$ARM_SUBSCRIPTION_ID"
          export ARM_TENANT_ID="$ARM_TENANT_ID"
          terraform init
          terraform validate
          terraform apply dev.tfplan

